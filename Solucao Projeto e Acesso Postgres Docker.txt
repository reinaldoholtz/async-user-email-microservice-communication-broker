youtube : https://www.youtube.com/watch?v=ZnECi2gatMs

1. Cliente vai enviar um post para cadastrar um usuario
2. O "User Microservice" irá salvar o usario na BD
3. Depois de salvar irá "produzir" uma mensagem e enviar para um Broker
4. O "Email Microservice" irá "consumir" a mensagem chegada no Broker
5. Após consumir a mensagem o "Email Microservice" irá:
- enviar um email de boas vindas para o usuário cadastrado
- salvar na BD o email enviado


Broker (RABBIT MQ)
RABBIT MQ é formado por uma estrutura de Exchange e Queues
Fluxo:
1. O User Microservice vai produzir a mensagem e irá enviar a mesangem para o RABBIT MQ e quem vai receber esta mensagem será o Exchange do RABBIT MQ
2. O Exchange irá analizar a mensagem e apartir disso irá fazer o roteamento para as respectiva fila
3. O Email Microservice estará conectado a fila e lendo as mensagens que forem chegando


Tecnologias utilizadas:
1. Java (versao 17)
2. Maven (gerenciador de dependencias)
3. Ecosistema Spring
Spring BOOT (para iniciar os microservices de negocios)
Spring WEB (para criar os endpoints)
Spring Data JPA (para realizar as transacoes com a base de dados)
Spring Validation (para realizar as validacoes para a entrada da api)
Spring AMQP (para trabalhar com o protocolo de mensageria de trabalhar de forma assincrona)
Spring Mail (para enviarmos o email para os usuarios)
4. Postgresql (base de dados)
5. RABBIT MQ (broker na Cloud AMQP)
6. CLOUD AMQP 
7. SMTP Email (smtp do gooble email)	


Criar a Conexao com o RabbitMQ para usar no EmailMicroservice
1. Acessar Cloud AMQP:
https://customer.cloudamqp.com/instance

2. Criar a Instancia
- Criar uma instancia pegar o url gerada e colocar no application.properties
- Instancia criada : ms
- copiar o endereco criado : amqps://dzhidxrh:wtjtI5eSlYxZtFJNprwFonx7-ZdK6ypD@rat.rmq2.cloudamqp.com/dzhidxrh para dentro do application.properties

spring.rabbitmq.addresses=amqps://dzhidxrh:wtjtI5eSlYxZtFJNprwFonx7-ZdK6ypD@rat.rmq2.cloudamqp.com/dzhidxrh

broker.queue.email.name=default.email

3. Clicar no botao em verde "RabbitMQ Manager" para acessar as filas criadas
4. Iniciar a aplicacao para criar a fila automaticamente

 
Criar aplicar a conexao com o UserMicroservice:

- No application.properties colocar a conexao com a RabbitMQ:
spring.rabbitmq.addresses=amqps://dzhidxrh:wtjtI5eSlYxZtFJNprwFonx7-ZdK6ypD@rat.rmq2.cloudamqp.com/dzhidxrh

broker.queue.email.name=default.email
 
-----------------------------------------------------------------------------------------------------------
Docker Local:
------------
- Acesso ao Postgresql
comandos docker:
iniciar o docker compose:
docker-compose up -d

parar o docker compose:
docker compose down

verificar os docker ativos:
docker ps

inspecionar um docker:
docker inspect <id do docker>


# acesso postgres no docker
# passo 1: http://localhost:5050/browser/
# passo 2: user = admin and pwd = pass
Please enter your master password.
This is required to unlock saved passwords and reconnect to the database server(s)

# passo 3: criar um novo register / server
# tab 1 : docker-postgres
# tab 2 : connection : nome do docker do postgres (dk_postgres) e user : docker / pwd : docker


-----------------------------------------------------------------------------------------------------------
Usando Docker para acessar RabbitMQ
- executar o comando :
docker run -il --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.9-management

- acessar via:
http://localhost:15672/ 
Para logar nós usaremos :
username = guest 
pwd = guest

----------------------------------------------------------------------------------------------------------
Testes : Postman

Post (UserMicroservice)
{
	"name": "Roberto Carlos",
    "email": "reinaldo.holtz@gmail.com"
}

Get